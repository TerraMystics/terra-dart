syntax = "proto3";

package ibc.lightclients.solomachine.v2;

option go_package = "github.com/cosmos/ibc-go/modules/light-clients/06-solomachine/types";


import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

// ClientState defines a solo machine client that tracks the current consensus
// state and if the client is frozen.
message ClientState {
  option (goproto_getters) = false;
  // latest sequence of the client state
  uint64 sequence = 1;
  // frozen sequence of the solo machine
  bool           is_frozen       = 2 [(moretags) = "yaml:\"is_frozen\""];
  ConsensusState consensus_state = 3 [(moretags) = "yaml:\"consensus_state\""];
  // when set to true, will allow governance to update a solo machine client.
  // The client will be unfrozen if it is frozen.
  bool allow_update_after_proposal = 4 [(moretags) = "yaml:\"allow_update_after_proposal\""];
}

// ConsensusState defines a solo machine consensus state. The sequence of a
// consensus state is contained in the "height" key used in storing the
// consensus state.
message ConsensusState {
  option (goproto_getters) = false;
  // public key of the solo machine
  google.protobuf.Any public_key = 1 [(moretags) = "yaml:\"public_key\""];
  // diversifier allows the same public key to be re-used across different solo
  // machine clients (potentially on different chains) without being considered
  // misbehaviour.
  string diversifier = 2;
  uint64 timestamp   = 3;
}

// Header defines a solo machine consensus header
message Header {
  option (goproto_getters) = false;
  // sequence to update solo machine public key at
  uint64              sequence        = 1;
  uint64              timestamp       = 2;
  bytes               signature       = 3;
  google.protobuf.Any new_public_key  = 4 [(moretags) = "yaml:\"new_public_key\""];
  string              new_diversifier = 5 [(moretags) = "yaml:\"new_diversifier\""];
}

// Misbehaviour defines misbehaviour for a solo machine which consists
// of a sequence and two signatures over different messages at that sequence.
message Misbehaviour {
  option (goproto_getters) = false;
  string           client_id         = 1 [(moretags) = "yaml:\"client_id\""];
  uint64           sequence          = 2;
  SignatureAndData signature_one     = 3 [(moretags) = "yaml:\"signature_one\""];
  SignatureAndData signature_two     = 4 [(moretags) = "yaml:\"signature_two\""];
}

// SignatureAndData contains a signature and the data signed over to create that
// signature.
message SignatureAndData {
  option (goproto_getters) = false;
  bytes    signature                 = 1;
  DataType data_type                 = 2 [(moretags) = "yaml:\"data_type\""];
  bytes    data                      = 3;
  uint64   timestamp                 = 4;
}

// TimestampedSignatureData contains the signature data and the timestamp of the
// signature.
message TimestampedSignatureData {
  option (goproto_getters) = false;
  bytes  signature_data              = 1 [(moretags) = "yaml:\"signature_data\""];
  uint64 timestamp                   = 2;
}

// SignBytes defines the signed bytes used for signature verification.
message SignBytes {
  option (goproto_getters) = false;

  uint64 sequence    = 1;
  uint64 timestamp   = 2;
  string diversifier = 3;
  // type of the data used
  DataType data_type = 4 [(moretags) = "yaml:\"data_type\""];
  // marshaled data
  bytes data = 5;
}

// DataType defines the type of solo machine proof being created. This is done
// to preserve uniqueness of different data sign byte encodings.
enum DataType {
  option (goproto_enum_prefix) = false;

  // Default State
  DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0 [(enumvalue_customname) = "UNSPECIFIED"];
  // Data type for client state verification
  DATA_TYPE_CLIENT_STATE = 1 [(enumvalue_customname) = "CLIENT"];
  // Data type for consensus state verification
  DATA_TYPE_CONSENSUS_STATE = 2 [(enumvalue_customname) = "CONSENSUS"];
  // Data type for connection state verification
  DATA_TYPE_CONNECTION_STATE = 3 [(enumvalue_customname) = "CONNECTION"];
  // Data type for channel state verification
  DATA_TYPE_CHANNEL_STATE = 4 [(enumvalue_customname) = "CHANNEL"];
  // Data type for packet commitment verification
  DATA_TYPE_PACKET_COMMITMENT = 5 [(enumvalue_customname) = "PACKETCOMMITMENT"];
  // Data type for packet acknowledgement verification
  DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6 [(enumvalue_customname) = "PACKETACKNOWLEDGEMENT"];
  // Data type for packet receipt absence verification
  DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7 [(enumvalue_customname) = "PACKETRECEIPTABSENCE"];
  // Data type for next sequence recv verification
  DATA_TYPE_NEXT_SEQUENCE_RECV = 8 [(enumvalue_customname) = "NEXTSEQUENCERECV"];
  // Data type for header verification
  DATA_TYPE_HEADER = 9 [(enumvalue_customname) = "HEADER"];
}

// HeaderData returns the SignBytes data for update verification.
message HeaderData {
  option (goproto_getters) = false;

  // header public key
  google.protobuf.Any new_pub_key = 1 [(moretags) = "yaml:\"new_pub_key\""];
  // header diversifier
  string new_diversifier = 2 [(moretags) = "yaml:\"new_diversifier\""];
}

// ClientStateData returns the SignBytes data for client state verification.
message ClientStateData {
  option (goproto_getters) = false;

  bytes               path         = 1;
  google.protobuf.Any client_state = 2 [(moretags) = "yaml:\"client_state\""];
}

// ConsensusStateData returns the SignBytes data for consensus state
// verification.
message ConsensusStateData {
  option (goproto_getters) = false;

  bytes               path            = 1;
  google.protobuf.Any consensus_state = 2 [(moretags) = "yaml:\"consensus_state\""];
}

// ConnectionStateData returns the SignBytes data for connection state
// verification.
message ConnectionStateData {
  option (goproto_getters) = false;

  bytes                                path       = 1;
  ConnectionEnd connection = 2;
}

// ChannelStateData returns the SignBytes data for channel state
// verification.
message ChannelStateData {
  option (goproto_getters) = false;

  bytes                       path    = 1;
  Channel channel = 2;
}

// PacketCommitmentData returns the SignBytes data for packet commitment
// verification.
message PacketCommitmentData {
  bytes path       = 1;
  bytes commitment = 2;
}

// PacketAcknowledgementData returns the SignBytes data for acknowledgement
// verification.
message PacketAcknowledgementData {
  bytes path            = 1;
  bytes acknowledgement = 2;
}

// PacketReceiptAbsenceData returns the SignBytes data for
// packet receipt absence verification.
message PacketReceiptAbsenceData {
  bytes path = 1;
}

// NextSequenceRecvData returns the SignBytes data for verification of the next
// sequence to be received.
message NextSequenceRecvData {
  bytes  path          = 1;
  uint64 next_seq_recv = 2 [(moretags) = "yaml:\"next_seq_recv\""];
}














message ConnectionEnd{}

extend google.protobuf.EnumOptions {
	optional bool goproto_enum_prefix = 62001;
	optional bool goproto_enum_stringer = 62021;
	optional bool enum_stringer = 62022;
	optional string enum_customname = 62023;
	optional bool enumdecl = 62024;
}

extend google.protobuf.EnumValueOptions {
	optional string enumvalue_customname = 66001;
}

extend google.protobuf.FileOptions {
	optional bool goproto_getters_all = 63001;
	optional bool goproto_enum_prefix_all = 63002;
	optional bool goproto_stringer_all = 63003;
	optional bool verbose_equal_all = 63004;
	optional bool face_all = 63005;
	optional bool gostring_all = 63006;
	optional bool populate_all = 63007;
	optional bool stringer_all = 63008;
	optional bool onlyone_all = 63009;

	optional bool equal_all = 63013;
	optional bool description_all = 63014;
	optional bool testgen_all = 63015;
	optional bool benchgen_all = 63016;
	optional bool marshaler_all = 63017;
	optional bool unmarshaler_all = 63018;
	optional bool stable_marshaler_all = 63019;

	optional bool sizer_all = 63020;

	optional bool goproto_enum_stringer_all = 63021;
	optional bool enum_stringer_all = 63022;

	optional bool unsafe_marshaler_all = 63023;
	optional bool unsafe_unmarshaler_all = 63024;

	optional bool goproto_extensions_map_all = 63025;
	optional bool goproto_unrecognized_all = 63026;
	optional bool gogoproto_import = 63027;
	optional bool protosizer_all = 63028;
	optional bool compare_all = 63029;
    optional bool typedecl_all = 63030;
    optional bool enumdecl_all = 63031;

	optional bool goproto_registration = 63032;
	optional bool messagename_all = 63033;

	optional bool goproto_sizecache_all = 63034;
	optional bool goproto_unkeyed_all = 63035;
}

extend google.protobuf.MessageOptions {
	optional bool goproto_getters = 64001;
	optional bool goproto_stringer = 64003;
	optional bool verbose_equal = 64004;
	optional bool face = 64005;
	optional bool gostring = 64006;
	optional bool populate = 64007;
	optional bool stringer = 67008;
	optional bool onlyone = 64009;

	optional bool equal = 64013;
	optional bool description = 64014;
	optional bool testgen = 64015;
	optional bool benchgen = 64016;
	optional bool marshaler = 64017;
	optional bool unmarshaler = 64018;
	optional bool stable_marshaler = 64019;

	optional bool sizer = 64020;

	optional bool unsafe_marshaler = 64023;
	optional bool unsafe_unmarshaler = 64024;

	optional bool goproto_extensions_map = 64025;
	optional bool goproto_unrecognized = 64026;

	optional bool protosizer = 64028;
	optional bool compare = 64029;

	optional bool typedecl = 64030;

	optional bool messagename = 64033;

	optional bool goproto_sizecache = 64034;
	optional bool goproto_unkeyed = 64035;
}

extend google.protobuf.FieldOptions {
	optional bool nullable = 65001;
	optional bool embed = 65002;
	optional string customtype = 65003;
	optional string customname = 65004;
	optional string jsontag = 65005;
	optional string moretags = 65006;
	optional string casttype = 65007;
	optional string castkey = 65008;
	optional string castvalue = 65009;

	optional bool stdtime = 65010;
	optional bool stdduration = 65011;
	optional bool wktpointer = 65012;

	optional string castrepeated = 65013;
}
